diff --git a/contracts/cw20-base/Cargo.toml b/contracts/cw20-base/Cargo.toml
index 2f49e44..40409d0 100644
--- a/contracts/cw20-base/Cargo.toml
+++ b/contracts/cw20-base/Cargo.toml
@@ -29,4 +29,6 @@ serde = { version = "1.0.188", default-features = false, features = ["derive"] }
 thiserror = { version = "1.0.49" }
 
+test-fuzz = { path = "../../../../test-fuzz" }
+
 [dev-dependencies]
 cw-multi-test = "0.16.5"
diff --git a/contracts/cw20-base/src/contract.rs b/contracts/cw20-base/src/contract.rs
index 6f92ac2..2df8ffe 100644
--- a/contracts/cw20-base/src/contract.rs
+++ b/contracts/cw20-base/src/contract.rs
@@ -91,7 +91,33 @@ fn verify_logo(logo: &Logo) -> Result<(), ContractError> {
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
+struct MockDepsMut;
+
+impl<'a> test_fuzz::FromRef<DepsMut<'a>> for MockDepsMut {
+    fn from_ref(_: &DepsMut) -> Self {
+        Self
+    }
+}
+
+impl<'a> test_fuzz::Into<DepsMut<'a>> for MockDepsMut {
+    fn into(self) -> DepsMut<'a> {
+        let cosmwasm_std::OwnedDeps {
+            storage,
+            api,
+            querier,
+            ..
+        } = cosmwasm_std::testing::mock_dependencies();
+        DepsMut {
+            storage: Box::leak(Box::new(storage)),
+            api: Box::leak(Box::new(api)),
+            querier: cosmwasm_std::QuerierWrapper::new(Box::leak(Box::new(querier))),
+        }
+    }
+}
+
 #[cfg_attr(not(feature = "library"), entry_point)]
-pub fn instantiate(
-    mut deps: DepsMut,
+#[test_fuzz::test_fuzz(convert = "DepsMut<'a>, MockDepsMut")]
+pub fn instantiate<'a>(
+    mut deps: DepsMut<'a>,
     _env: Env,
     _info: MessageInfo,
@@ -185,6 +211,7 @@ pub fn validate_accounts(accounts: &[Cw20Coin]) -> Result<(), ContractError> {
 
 #[cfg_attr(not(feature = "library"), entry_point)]
-pub fn execute(
-    deps: DepsMut,
+#[test_fuzz::test_fuzz(convert = "DepsMut<'a>, MockDepsMut")]
+pub fn execute<'a>(
+    deps: DepsMut<'a>,
     env: Env,
     info: MessageInfo,
@@ -504,6 +531,32 @@ pub fn execute_upload_logo(
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
+struct MockDeps;
+
+impl<'a> From<Deps<'a>> for MockDeps {
+    fn from(_: Deps) -> Self {
+        Self
+    }
+}
+
+impl<'a> test_fuzz::Into<Deps<'a>> for MockDeps {
+    fn into(self) -> Deps<'a> {
+        let cosmwasm_std::OwnedDeps {
+            storage,
+            api,
+            querier,
+            ..
+        } = cosmwasm_std::testing::mock_dependencies();
+        Deps {
+            storage: Box::leak(Box::new(storage)),
+            api: Box::leak(Box::new(api)),
+            querier: cosmwasm_std::QuerierWrapper::new(Box::leak(Box::new(querier))),
+        }
+    }
+}
+
 #[cfg_attr(not(feature = "library"), entry_point)]
-pub fn query(deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {
+#[test_fuzz::test_fuzz(convert = "Deps<'a>, MockDeps")]
+pub fn query<'a>(deps: Deps<'a>, _env: Env, msg: QueryMsg) -> StdResult<Binary> {
     match msg {
         QueryMsg::Balance { address } => to_binary(&query_balance(deps, address)?),
@@ -587,5 +640,10 @@ pub fn query_download_logo(deps: Deps) -> StdResult<DownloadLogoResponse> {
 
 #[cfg_attr(not(feature = "library"), entry_point)]
-pub fn migrate(deps: DepsMut, _env: Env, _msg: MigrateMsg) -> Result<Response, ContractError> {
+#[test_fuzz::test_fuzz(convert = "DepsMut<'a>, MockDepsMut")]
+pub fn migrate<'a>(
+    deps: DepsMut<'a>,
+    _env: Env,
+    _msg: MigrateMsg,
+) -> Result<Response, ContractError> {
     let original_version =
         ensure_from_older_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;
diff --git a/contracts/cw20-base/src/msg.rs b/contracts/cw20-base/src/msg.rs
index 2088712..81110d1 100644
--- a/contracts/cw20-base/src/msg.rs
+++ b/contracts/cw20-base/src/msg.rs
@@ -123,5 +123,5 @@ pub enum QueryMsg {
 }
 
-#[derive(Serialize, Deserialize, JsonSchema)]
+#[derive(Clone, Serialize, Deserialize, JsonSchema)]
 pub struct MigrateMsg {}
 
