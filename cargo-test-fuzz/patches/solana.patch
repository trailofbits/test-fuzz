diff --git a/program-runtime/src/accounts_data_meter.rs b/program-runtime/src/accounts_data_meter.rs
index 3e0553d..5136a8b 100644
--- a/program-runtime/src/accounts_data_meter.rs
+++ b/program-runtime/src/accounts_data_meter.rs
@@ -10,5 +10,5 @@ pub const MAX_ACCOUNTS_DATA_LEN: u64 = 128_000_000_000;
 
 /// Meter and track the amount of available accounts data space
-#[derive(Debug, Default, Clone, Copy, Eq, PartialEq)]
+#[derive(Debug, Default, Clone, Copy, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct AccountsDataMeter {
     /// The initial amount of accounts data space used (in bytes)
diff --git a/program-runtime/src/compute_budget.rs b/program-runtime/src/compute_budget.rs
index 7f00f43..38eacf7 100644
--- a/program-runtime/src/compute_budget.rs
+++ b/program-runtime/src/compute_budget.rs
@@ -27,5 +27,5 @@ impl ::solana_frozen_abi::abi_example::AbiExample for ComputeBudget {
 }
 
-#[derive(Clone, Copy, Debug, PartialEq, Eq)]
+#[derive(Clone, Copy, Debug, PartialEq, Eq, serde::Deserialize, serde::Serialize)]
 pub struct ComputeBudget {
     /// Number of compute units that a transaction or individual instruction is
diff --git a/program-runtime/src/invoke_context.rs b/program-runtime/src/invoke_context.rs
index ecd29d8..60ee670 100644
--- a/program-runtime/src/invoke_context.rs
+++ b/program-runtime/src/invoke_context.rs
@@ -116,4 +116,5 @@ impl fmt::Display for AllocErr {
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct BpfAllocator {
     len: u64,
@@ -144,4 +145,5 @@ impl BpfAllocator {
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct SyscallContext {
     pub allocator: BpfAllocator,
@@ -150,8 +152,52 @@ pub struct SyscallContext {
 }
 
+pub fn serialize_ref<S, T>(x: &&T, serializer: S) -> Result<S::Ok, S::Error>
+where
+    S: serde::Serializer,
+    T: serde::Serialize,
+{
+    <T as serde::Serialize>::serialize(*x, serializer)
+}
+
+pub fn deserialize_ref<'de, D, T>(deserializer: D) -> Result<&'static T, D::Error>
+where
+    D: serde::Deserializer<'de>,
+    T: serde::de::DeserializeOwned + std::fmt::Debug,
+{
+    let x = <T as serde::de::Deserialize>::deserialize(deserializer)?;
+    Ok(Box::leak(Box::new(x)))
+}
+
+pub fn serialize_ref_mut<S, T>(x: &&mut T, serializer: S) -> Result<S::Ok, S::Error>
+where
+    S: serde::Serializer,
+    T: serde::Serialize,
+{
+    <T as serde::Serialize>::serialize(*x, serializer)
+}
+
+pub fn deserialize_ref_mut<'de, D, T>(deserializer: D) -> Result<&'static mut T, D::Error>
+where
+    D: serde::Deserializer<'de>,
+    T: serde::de::DeserializeOwned + std::fmt::Debug,
+{
+    let x = <T as serde::de::Deserialize>::deserialize(deserializer)?;
+    Ok(Box::leak(Box::new(x)))
+}
+
+fn default_builtin_programs() -> &'static BuiltinPrograms {
+    Box::leak(Box::new(BuiltinPrograms::default()))
+}
+
+#[derive(serde::Deserialize, serde::Serialize)]
 pub struct InvokeContext<'a> {
+    #[serde(
+        serialize_with = "serialize_ref_mut",
+        deserialize_with = "deserialize_ref_mut"
+    )]
     pub transaction_context: &'a mut TransactionContext,
     rent: Rent,
     pre_accounts: Vec<PreAccount>,
+    #[serde(serialize_with = "serialize_ref", deserialize_with = "deserialize_ref")]
     sysvar_cache: &'a SysvarCache,
     log_collector: Option<Rc<RefCell<LogCollector>>>,
@@ -160,6 +206,9 @@ pub struct InvokeContext<'a> {
     compute_meter: RefCell<u64>,
     accounts_data_meter: AccountsDataMeter,
+    #[serde(skip)]
     pub programs_loaded_for_tx_batch: &'a LoadedProgramsForTxBatch,
+    #[serde(skip)]
     pub programs_modified_by_tx: &'a mut LoadedProgramsForTxBatch,
+    #[serde(skip)]
     pub programs_updated_only_for_global_cache: &'a mut LoadedProgramsForTxBatch,
     pub feature_set: Arc<FeatureSet>,
@@ -171,4 +220,25 @@ pub struct InvokeContext<'a> {
 }
 
+impl<'a> Clone for InvokeContext<'a> {
+    fn clone(&self) -> Self {
+        Self {
+            transaction_context: Box::leak(Box::new(self.transaction_context.clone())),
+            pre_accounts: self.pre_accounts.clone(),
+            log_collector: self.log_collector.clone(),
+            compute_meter: self.compute_meter.clone(),
+            programs_loaded_for_tx_batch: self.programs_loaded_for_tx_batch.clone(),
+            programs_modified_by_tx: self.programs_modified_by_tx.clone(),
+            programs_updated_only_for_global_cache: self
+                .programs_updated_only_for_global_cache
+                .clone(),
+            feature_set: self.feature_set.clone(),
+            timings: self.timings.clone(),
+            syscall_context: self.syscall_context.clone(),
+            traces: self.traces.clone(),
+            ..*self
+        }
+    }
+}
+
 impl<'a> InvokeContext<'a> {
     #[allow(clippy::too_many_arguments)]
diff --git a/program-runtime/src/log_collector.rs b/program-runtime/src/log_collector.rs
index 57ac1ce..aacc5cf 100644
--- a/program-runtime/src/log_collector.rs
+++ b/program-runtime/src/log_collector.rs
@@ -4,4 +4,5 @@ use std::{cell::RefCell, rc::Rc};
 const LOG_MESSAGES_BYTES_LIMIT: usize = 10 * 1000;
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct LogCollector {
     messages: Vec<String>,
diff --git a/program-runtime/src/pre_account.rs b/program-runtime/src/pre_account.rs
index 2ca91ba..d94725c 100644
--- a/program-runtime/src/pre_account.rs
+++ b/program-runtime/src/pre_account.rs
@@ -13,5 +13,5 @@ use {
 // The relevant state of an account before an Instruction executes, used
 // to verify account integrity after the Instruction completes
-#[derive(Clone, Debug, Default)]
+#[derive(Clone, Debug, Default, serde::Deserialize, serde::Serialize)]
 pub struct PreAccount {
     key: Pubkey,
diff --git a/program-runtime/src/sysvar_cache.rs b/program-runtime/src/sysvar_cache.rs
index 4557a5b..b87fff9 100644
--- a/program-runtime/src/sysvar_cache.rs
+++ b/program-runtime/src/sysvar_cache.rs
@@ -23,5 +23,5 @@ impl ::solana_frozen_abi::abi_example::AbiExample for SysvarCache {
 }
 
-#[derive(Default, Clone, Debug)]
+#[derive(Default, Clone, Debug, serde::Deserialize, serde::Serialize)]
 pub struct SysvarCache {
     clock: Option<Arc<Clock>>,
diff --git a/program-runtime/src/timings.rs b/program-runtime/src/timings.rs
index 0e2e495..a380f89 100644
--- a/program-runtime/src/timings.rs
+++ b/program-runtime/src/timings.rs
@@ -9,5 +9,5 @@ use {
 };
 
-#[derive(Default, Debug, PartialEq, Eq)]
+#[derive(Default, Debug, PartialEq, Eq, Clone, serde::Deserialize, serde::Serialize)]
 pub struct ProgramTiming {
     pub accumulated_us: u64,
@@ -388,5 +388,5 @@ impl ExecuteAccessoryTimings {
 }
 
-#[derive(Default, Debug, PartialEq, Eq)]
+#[derive(Default, Debug, PartialEq, Eq, Clone, serde::Deserialize, serde::Serialize)]
 pub struct ExecuteDetailsTimings {
     pub serialize_us: u64,
diff --git a/programs/bpf_loader/Cargo.toml b/programs/bpf_loader/Cargo.toml
index 1cc2969..485ac04 100644
--- a/programs/bpf_loader/Cargo.toml
+++ b/programs/bpf_loader/Cargo.toml
@@ -22,4 +22,7 @@ solana_rbpf = { workspace = true }
 thiserror = { workspace = true }
 
+serde = "1.0"
+test-fuzz = { path = "../../../../test-fuzz" }
+
 [dev-dependencies]
 memoffset = { workspace = true }
diff --git a/programs/bpf_loader/src/lib.rs b/programs/bpf_loader/src/lib.rs
index 822753f..5ee5c31 100644
--- a/programs/bpf_loader/src/lib.rs
+++ b/programs/bpf_loader/src/lib.rs
@@ -420,6 +420,7 @@ pub fn process_instruction(
 }
 
-fn process_instruction_inner(
-    invoke_context: &mut InvokeContext,
+#[test_fuzz::test_fuzz]
+fn process_instruction_inner<'a>(
+    invoke_context: &mut InvokeContext<'a>,
 ) -> Result<u64, Box<dyn std::error::Error>> {
     let log_collector = invoke_context.get_log_collector();
diff --git a/sdk/Cargo.toml b/sdk/Cargo.toml
index 7e8368d..56d903d 100644
--- a/sdk/Cargo.toml
+++ b/sdk/Cargo.toml
@@ -67,5 +67,5 @@ rand = { workspace = true, optional = true }
 rand_chacha = { workspace = true, optional = true }
 rustversion = { workspace = true }
-serde = { workspace = true }
+serde = { version = "1.0.152", features = ["rc"] }
 serde_bytes = { workspace = true }
 serde_derive = { workspace = true }
@@ -83,4 +83,6 @@ uriparse = { workspace = true }
 wasm-bindgen = { workspace = true }
 
+test-fuzz = { path = "../../../test-fuzz" }
+
 [target.'cfg(target_arch = "wasm32")'.dependencies]
 js-sys = { workspace = true }
diff --git a/sdk/src/feature_set.rs b/sdk/src/feature_set.rs
index 475f896..2b175d7 100644
--- a/sdk/src/feature_set.rs
+++ b/sdk/src/feature_set.rs
@@ -865,5 +865,5 @@ lazy_static! {
 
 /// `FeatureSet` holds the set of currently active/inactive runtime features
-#[derive(AbiExample, Debug, Clone, Eq, PartialEq)]
+#[derive(AbiExample, Debug, Clone, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct FeatureSet {
     pub active: HashMap<Pubkey, Slot>,
diff --git a/sdk/src/transaction_context.rs b/sdk/src/transaction_context.rs
index 8f8d1bb..867b69a 100644
--- a/sdk/src/transaction_context.rs
+++ b/sdk/src/transaction_context.rs
@@ -36,5 +36,5 @@ pub type IndexOfAccount = u16;
 ///
 /// It also contains indices to other structures for faster lookup.
-#[derive(Clone, Debug, Eq, PartialEq)]
+#[derive(Clone, Debug, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct InstructionAccount {
     /// Points to the account and its key in the `TransactionContext`
@@ -57,5 +57,5 @@ pub struct InstructionAccount {
 pub type TransactionAccount = (Pubkey, AccountSharedData);
 
-#[derive(Clone, Debug, PartialEq)]
+#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct TransactionAccounts {
     accounts: Vec<RefCell<AccountSharedData>>,
@@ -137,9 +137,31 @@ impl TransactionAccounts {
 }
 
+fn serialize_account_keys<'a, S>(
+    account_keys: &Pin<Box<[Pubkey]>>,
+    serializer: S,
+) -> Result<S::Ok, S::Error>
+where
+    S: serde::Serializer,
+{
+    <[Pubkey] as serde::Serialize>::serialize(&**account_keys, serializer)
+}
+
+fn deserialize_account_keys<'de, D>(deserializer: D) -> Result<Pin<Box<[Pubkey]>>, D::Error>
+where
+    D: serde::Deserializer<'de>,
+{
+    let account_keys = <Vec<Pubkey> as serde::de::Deserialize>::deserialize(deserializer)?;
+    Ok(Pin::new(account_keys.into_boxed_slice()))
+}
+
 /// Loaded transaction shared between runtime and programs.
 ///
 /// This context is valid for the entire duration of a transaction being processed.
-#[derive(Debug, Clone, PartialEq)]
+#[derive(Debug, Clone, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct TransactionContext {
+    #[serde(
+        serialize_with = "serialize_account_keys",
+        deserialize_with = "deserialize_account_keys"
+    )]
     account_keys: Pin<Box<[Pubkey]>>,
     accounts: Arc<TransactionAccounts>,
@@ -481,5 +503,5 @@ pub struct TransactionReturnData {
 ///
 /// This context is valid for the entire duration of a (possibly cross program) instruction being processed.
-#[derive(Debug, Clone, Default, Eq, PartialEq)]
+#[derive(Debug, Clone, Default, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct InstructionContext {
     nesting_level: usize,
