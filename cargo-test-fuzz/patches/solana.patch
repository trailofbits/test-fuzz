diff --git a/program-runtime/Cargo.toml b/program-runtime/Cargo.toml
index ed4b2a6..670e9e1 100644
--- a/program-runtime/Cargo.toml
+++ b/program-runtime/Cargo.toml
@@ -31,4 +31,6 @@ solana_rbpf = { workspace = true }
 thiserror = { workspace = true }
 
+test-fuzz = { path = "../../../test-fuzz" }
+
 [dev-dependencies]
 assert_matches = { workspace = true }
diff --git a/program-runtime/src/accounts_data_meter.rs b/program-runtime/src/accounts_data_meter.rs
index 3e0553d..5136a8b 100644
--- a/program-runtime/src/accounts_data_meter.rs
+++ b/program-runtime/src/accounts_data_meter.rs
@@ -10,5 +10,5 @@ pub const MAX_ACCOUNTS_DATA_LEN: u64 = 128_000_000_000;
 
 /// Meter and track the amount of available accounts data space
-#[derive(Debug, Default, Clone, Copy, Eq, PartialEq)]
+#[derive(Debug, Default, Clone, Copy, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct AccountsDataMeter {
     /// The initial amount of accounts data space used (in bytes)
diff --git a/program-runtime/src/compute_budget.rs b/program-runtime/src/compute_budget.rs
index a568162..7889a27 100644
--- a/program-runtime/src/compute_budget.rs
+++ b/program-runtime/src/compute_budget.rs
@@ -19,5 +19,5 @@ impl ::solana_frozen_abi::abi_example::AbiExample for ComputeBudget {
 pub const DEFAULT_HEAP_COST: u64 = 8;
 
-#[derive(Clone, Copy, Debug, PartialEq, Eq)]
+#[derive(Clone, Copy, Debug, PartialEq, Eq, serde::Deserialize, serde::Serialize)]
 pub struct ComputeBudget {
     /// Number of compute units that a transaction or individual instruction is
diff --git a/program-runtime/src/invoke_context.rs b/program-runtime/src/invoke_context.rs
index 9786d50..580d24e 100644
--- a/program-runtime/src/invoke_context.rs
+++ b/program-runtime/src/invoke_context.rs
@@ -115,4 +115,5 @@ impl fmt::Display for AllocErr {
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct BpfAllocator {
     len: u64,
@@ -143,4 +144,5 @@ impl BpfAllocator {
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct SyscallContext {
     pub allocator: BpfAllocator,
@@ -149,5 +151,11 @@ pub struct SyscallContext {
 }
 
-#[derive(Debug, Clone)]
+impl std::fmt::Debug for SyscallContext {
+    fn fmt(&self, _f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
+        Ok(())
+    }
+}
+
+#[derive(Debug, Clone, serde::Deserialize, serde::Serialize)]
 pub struct SerializedAccountMetadata {
     pub original_data_len: usize,
@@ -158,6 +166,22 @@ pub struct SerializedAccountMetadata {
 }
 
+fn default_loaded_programs<'de, D>(_: D) -> Result<&'static mut LoadedProgramsForTxBatch, D::Error>
+where
+    D: serde::Deserializer<'de>,
+{
+    Ok(Box::leak(Box::new(LoadedProgramsForTxBatch::default())))
+}
+
+#[derive(Debug, serde::Deserialize, serde::Serialize)]
 pub struct InvokeContext<'a> {
+    #[serde(
+        serialize_with = "test_fuzz::serialize_ref_mut",
+        deserialize_with = "test_fuzz::deserialize_ref_mut"
+    )]
     pub transaction_context: &'a mut TransactionContext,
+    #[serde(
+        serialize_with = "test_fuzz::serialize_ref",
+        deserialize_with = "test_fuzz::deserialize_ref"
+    )]
     sysvar_cache: &'a SysvarCache,
     log_collector: Option<Rc<RefCell<LogCollector>>>,
@@ -166,5 +190,7 @@ pub struct InvokeContext<'a> {
     compute_meter: RefCell<u64>,
     accounts_data_meter: AccountsDataMeter,
+    #[serde(skip_serializing, deserialize_with = "default_loaded_programs")]
     pub programs_loaded_for_tx_batch: &'a LoadedProgramsForTxBatch,
+    #[serde(skip_serializing, deserialize_with = "default_loaded_programs")]
     pub programs_modified_by_tx: &'a mut LoadedProgramsForTxBatch,
     pub feature_set: Arc<FeatureSet>,
@@ -176,4 +202,23 @@ pub struct InvokeContext<'a> {
 }
 
+impl<'a> Clone for InvokeContext<'a> {
+    fn clone(&self) -> Self {
+        Self {
+            transaction_context: Box::leak(Box::new(self.transaction_context.clone())),
+            log_collector: self.log_collector.clone(),
+            compute_meter: self.compute_meter.clone(),
+            programs_loaded_for_tx_batch: Box::leak(Box::new(
+                self.programs_loaded_for_tx_batch.clone(),
+            )),
+            programs_modified_by_tx: Box::leak(Box::new(self.programs_modified_by_tx.clone())),
+            feature_set: self.feature_set.clone(),
+            timings: self.timings.clone(),
+            syscall_context: self.syscall_context.clone(),
+            traces: self.traces.clone(),
+            ..*self
+        }
+    }
+}
+
 impl<'a> InvokeContext<'a> {
     #[allow(clippy::too_many_arguments)]
diff --git a/program-runtime/src/log_collector.rs b/program-runtime/src/log_collector.rs
index 8c801b8..93bb50b 100644
--- a/program-runtime/src/log_collector.rs
+++ b/program-runtime/src/log_collector.rs
@@ -4,4 +4,5 @@ use std::{cell::RefCell, rc::Rc};
 const LOG_MESSAGES_BYTES_LIMIT: usize = 10 * 1000;
 
+#[derive(Clone, Debug, serde::Deserialize, serde::Serialize)]
 pub struct LogCollector {
     messages: Vec<String>,
diff --git a/program-runtime/src/sysvar_cache.rs b/program-runtime/src/sysvar_cache.rs
index c403f1c..45b9844 100644
--- a/program-runtime/src/sysvar_cache.rs
+++ b/program-runtime/src/sysvar_cache.rs
@@ -25,5 +25,5 @@ impl ::solana_frozen_abi::abi_example::AbiExample for SysvarCache {
 }
 
-#[derive(Default, Clone, Debug)]
+#[derive(Default, Clone, Debug, serde::Deserialize, serde::Serialize)]
 pub struct SysvarCache {
     clock: Option<Arc<Clock>>,
diff --git a/program-runtime/src/timings.rs b/program-runtime/src/timings.rs
index 8eeb9c5..d95800a 100644
--- a/program-runtime/src/timings.rs
+++ b/program-runtime/src/timings.rs
@@ -9,5 +9,5 @@ use {
 };
 
-#[derive(Default, Debug, PartialEq, Eq)]
+#[derive(Default, Debug, PartialEq, Eq, Clone, serde::Deserialize, serde::Serialize)]
 pub struct ProgramTiming {
     pub accumulated_us: u64,
@@ -381,5 +381,5 @@ impl ExecuteAccessoryTimings {
 }
 
-#[derive(Default, Debug, PartialEq, Eq)]
+#[derive(Default, Debug, PartialEq, Eq, Clone, serde::Deserialize, serde::Serialize)]
 pub struct ExecuteDetailsTimings {
     pub serialize_us: u64,
diff --git a/programs/bpf_loader/Cargo.toml b/programs/bpf_loader/Cargo.toml
index 48d771b..1d1d527 100644
--- a/programs/bpf_loader/Cargo.toml
+++ b/programs/bpf_loader/Cargo.toml
@@ -23,4 +23,7 @@ solana_rbpf = { workspace = true }
 thiserror = { workspace = true }
 
+serde = "1.0"
+test-fuzz = { path = "../../../../test-fuzz" }
+
 [dev-dependencies]
 assert_matches = { workspace = true }
diff --git a/programs/bpf_loader/src/lib.rs b/programs/bpf_loader/src/lib.rs
index 0f9e830..47bce28 100644
--- a/programs/bpf_loader/src/lib.rs
+++ b/programs/bpf_loader/src/lib.rs
@@ -381,6 +381,7 @@ declare_builtin_function!(
 );
 
-pub fn process_instruction_inner(
-    invoke_context: &mut InvokeContext,
+#[test_fuzz::test_fuzz]
+pub fn process_instruction_inner<'a>(
+    invoke_context: &mut InvokeContext<'a>,
 ) -> Result<u64, Box<dyn std::error::Error>> {
     let log_collector = invoke_context.get_log_collector();
diff --git a/sdk/Cargo.toml b/sdk/Cargo.toml
index 061b16c..d994737 100644
--- a/sdk/Cargo.toml
+++ b/sdk/Cargo.toml
@@ -69,5 +69,5 @@ rand = { workspace = true, optional = true }
 rand0-7 = { package = "rand", version = "0.7", optional = true }
 rustversion = { workspace = true }
-serde = { workspace = true }
+serde = { version = "1.0", features = ["rc"] }
 serde_bytes = { workspace = true }
 serde_derive = { workspace = true }
@@ -85,4 +85,6 @@ uriparse = { workspace = true }
 wasm-bindgen = { workspace = true }
 
+test-fuzz = { path = "../../../test-fuzz" }
+
 [target.'cfg(target_arch = "wasm32")'.dependencies]
 js-sys = { workspace = true }
diff --git a/sdk/src/feature_set.rs b/sdk/src/feature_set.rs
index 2373eeb..3cc99d8 100644
--- a/sdk/src/feature_set.rs
+++ b/sdk/src/feature_set.rs
@@ -959,5 +959,5 @@ lazy_static! {
 
 /// `FeatureSet` holds the set of currently active/inactive runtime features
-#[derive(AbiExample, Debug, Clone, Eq, PartialEq)]
+#[derive(AbiExample, Debug, Clone, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct FeatureSet {
     pub active: HashMap<Pubkey, Slot>,
diff --git a/sdk/src/transaction_context.rs b/sdk/src/transaction_context.rs
index 7df7fc9..d5ff356 100644
--- a/sdk/src/transaction_context.rs
+++ b/sdk/src/transaction_context.rs
@@ -36,5 +36,5 @@ pub type IndexOfAccount = u16;
 ///
 /// It also contains indices to other structures for faster lookup.
-#[derive(Clone, Debug, Eq, PartialEq)]
+#[derive(Clone, Debug, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct InstructionAccount {
     /// Points to the account and its key in the `TransactionContext`
@@ -57,5 +57,5 @@ pub struct InstructionAccount {
 pub type TransactionAccount = (Pubkey, AccountSharedData);
 
-#[derive(Clone, Debug, PartialEq)]
+#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct TransactionAccounts {
     accounts: Vec<RefCell<AccountSharedData>>,
@@ -130,9 +130,31 @@ impl TransactionAccounts {
 }
 
+fn serialize_account_keys<'a, S>(
+    account_keys: &Pin<Box<[Pubkey]>>,
+    serializer: S,
+) -> Result<S::Ok, S::Error>
+where
+    S: serde::Serializer,
+{
+    <[Pubkey] as serde::Serialize>::serialize(&**account_keys, serializer)
+}
+
+fn deserialize_account_keys<'de, D>(deserializer: D) -> Result<Pin<Box<[Pubkey]>>, D::Error>
+where
+    D: serde::Deserializer<'de>,
+{
+    let account_keys = <Vec<Pubkey> as serde::de::Deserialize>::deserialize(deserializer)?;
+    Ok(Pin::new(account_keys.into_boxed_slice()))
+}
+
 /// Loaded transaction shared between runtime and programs.
 ///
 /// This context is valid for the entire duration of a transaction being processed.
-#[derive(Debug, Clone, PartialEq)]
+#[derive(Debug, Clone, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct TransactionContext {
+    #[serde(
+        serialize_with = "serialize_account_keys",
+        deserialize_with = "deserialize_account_keys"
+    )]
     account_keys: Pin<Box<[Pubkey]>>,
     accounts: Rc<TransactionAccounts>,
@@ -185,7 +207,7 @@ impl TransactionContext {
         }
 
-        Ok(Rc::try_unwrap(self.accounts)
-            .expect("transaction_context.accounts has unexpected outstanding refs")
-            .into_accounts())
+        // smoelius: Our implementation of `Clone` for `InvokeContext` leaks a copy of a
+        // `TransactionContext`, which is why a call to `Rc::try_unwrap(self.accounts)` would fail.
+        Ok((*self.accounts).clone().into_accounts())
     }
 
@@ -450,5 +472,5 @@ pub struct TransactionReturnData {
 ///
 /// This context is valid for the entire duration of a (possibly cross program) instruction being processed.
-#[derive(Debug, Clone, Default, Eq, PartialEq)]
+#[derive(Debug, Clone, Default, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct InstructionContext {
     nesting_level: usize,
