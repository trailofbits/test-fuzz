diff --git a/client/transaction-pool/Cargo.toml b/client/transaction-pool/Cargo.toml
index 06fc8298f0..28229c3981 100644
--- a/client/transaction-pool/Cargo.toml
+++ b/client/transaction-pool/Cargo.toml
@@ -20,5 +20,5 @@ futures-timer = "3.0.2"
 log = "0.4.8"
 parity-util-mem = { version = "0.10.2", default-features = false, features = ["primitive-types"] }
-parking_lot = "0.11.2"
+parking_lot = { version = "0.11.1", features = ["serde"] }
 prometheus-endpoint = { package = "substrate-prometheus-endpoint", path = "../../utils/prometheus", version = "0.10.0-dev"}
 sc-client-api = { version = "4.0.0-dev", path = "../api" }
@@ -31,7 +31,8 @@ sc-transaction-pool-api = { version = "4.0.0-dev", path = "./api" }
 sp-blockchain = { version = "4.0.0-dev", path = "../../primitives/blockchain" }
 sc-utils = { version = "4.0.0-dev", path = "../utils" }
-serde = { version = "1.0.132", features = ["derive"] }
+serde = { version = "1.0.132", features = ["derive", "rc"] }
 linked-hash-map = "0.5.4"
 retain_mut = "0.1.4"
+test-fuzz = { path = "../../../../test-fuzz" }
 
 [dev-dependencies]
diff --git a/client/transaction-pool/src/graph/base_pool.rs b/client/transaction-pool/src/graph/base_pool.rs
index 8e0422739c..32d0b5628e 100644
--- a/client/transaction-pool/src/graph/base_pool.rs
+++ b/client/transaction-pool/src/graph/base_pool.rs
@@ -85,5 +85,5 @@ pub struct PruneStatus<Hash, Ex> {
 /// Immutable transaction
 #[cfg_attr(test, derive(Clone))]
-#[derive(PartialEq, Eq, parity_util_mem::MallocSizeOf)]
+#[derive(PartialEq, Eq, parity_util_mem::MallocSizeOf, serde::Deserialize, serde::Serialize)]
 pub struct Transaction<Hash, Extrinsic> {
 	/// Raw extrinsic representing that transaction.
@@ -221,5 +221,7 @@ pub struct BasePool<Hash: hash::Hash + Eq, Ex> {
 }
 
-impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> Default for BasePool<Hash, Ex> {
+impl<Hash: hash::Hash + Member + Serialize, Ex: Clone + std::fmt::Debug + Serialize> Default
+	for BasePool<Hash, Ex>
+{
 	fn default() -> Self {
 		Self::new(false)
@@ -227,5 +229,7 @@ impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> Default for Bas
 }
 
-impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> BasePool<Hash, Ex> {
+impl<Hash: hash::Hash + Member + Serialize, Ex: Clone + std::fmt::Debug + Serialize>
+	BasePool<Hash, Ex>
+{
 	/// Create new pool given reject_future_transactions flag.
 	pub fn new(reject_future_transactions: bool) -> Self {
@@ -269,5 +273,5 @@ impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> BasePool<Hash,
 	pub fn import(&mut self, tx: Transaction<Hash, Ex>) -> error::Result<Imported<Hash, Ex>> {
 		if self.is_imported(&tx.hash) {
-			return Err(error::Error::AlreadyImported(Box::new(tx.hash)))
+			return Err(error::Error::AlreadyImported(Box::new(tx.hash)));
 		}
 
@@ -284,10 +288,10 @@ impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> BasePool<Hash,
 		if !tx.is_ready() {
 			if self.reject_future_transactions {
-				return Err(error::Error::RejectedFutureTransaction)
+				return Err(error::Error::RejectedFutureTransaction);
 			}
 
 			let hash = tx.transaction.hash.clone();
 			self.future.import(tx);
-			return Ok(Imported::Future { hash })
+			return Ok(Imported::Future { hash });
 		}
 
@@ -325,13 +329,14 @@ impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> BasePool<Hash,
 					// re-import them.
 					removed.append(&mut replaced);
-				},
+				}
 				// transaction failed to be imported.
-				Err(e) =>
+				Err(e) => {
 					if first {
 						debug!(target: "txpool", "[{:?}] Error importing: {:?}", current_hash, e);
-						return Err(e)
+						return Err(e);
 					} else {
 						failed.push(current_hash);
-					},
+					}
+				}
 			}
 			first = false;
@@ -349,5 +354,5 @@ impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> BasePool<Hash,
 
 			debug!(target: "txpool", "[{:?}] Cycle detected, bailing.", hash);
-			return Err(error::Error::CycleDetected)
+			return Err(error::Error::CycleDetected);
 		}
 
@@ -493,5 +498,5 @@ impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> BasePool<Hash,
 					warn!(target: "txpool", "[{:?}] Failed to promote during pruning: {:?}", hash, e);
 					failed.push(hash)
-				},
+				}
 			}
 		}
diff --git a/client/transaction-pool/src/graph/future.rs b/client/transaction-pool/src/graph/future.rs
index ae49e3f2d3..6d818f5658 100644
--- a/client/transaction-pool/src/graph/future.rs
+++ b/client/transaction-pool/src/graph/future.rs
@@ -29,5 +29,5 @@ use std::time::Instant;
 use super::base_pool::Transaction;
 
-#[derive(parity_util_mem::MallocSizeOf)]
+#[derive(parity_util_mem::MallocSizeOf, serde::Deserialize, serde::Serialize)]
 /// Transaction with partially satisfied dependencies.
 pub struct WaitingTransaction<Hash, Ex> {
@@ -37,4 +37,5 @@ pub struct WaitingTransaction<Hash, Ex> {
 	pub missing_tags: HashSet<Tag>,
 	/// Time of import to the Future Queue.
+	#[serde(skip, default = "Instant::now")]
 	pub imported_at: Instant,
 }
@@ -84,6 +85,6 @@ impl<Hash, Ex> WaitingTransaction<Hash, Ex> {
 				// is true if the tag is already satisfied either via transaction in the pool
 				// or one that was recently included.
-				let is_provided = provided.contains_key(&**tag) ||
-					recently_pruned.iter().any(|x| x.contains(&**tag));
+				let is_provided = provided.contains_key(&**tag)
+					|| recently_pruned.iter().any(|x| x.contains(&**tag));
 				!is_provided
 			})
diff --git a/client/transaction-pool/src/graph/ready.rs b/client/transaction-pool/src/graph/ready.rs
index ebaa73f149..159fd8411e 100644
--- a/client/transaction-pool/src/graph/ready.rs
+++ b/client/transaction-pool/src/graph/ready.rs
@@ -38,5 +38,5 @@ use super::{
 ///
 /// Should be cheap to clone.
-#[derive(Debug, parity_util_mem::MallocSizeOf)]
+#[derive(Debug, parity_util_mem::MallocSizeOf, serde::Deserialize, serde::Serialize)]
 pub struct TransactionRef<Hash, Ex> {
 	/// The actual transaction data.
@@ -75,5 +75,5 @@ impl<Hash, Ex> PartialEq for TransactionRef<Hash, Ex> {
 impl<Hash, Ex> Eq for TransactionRef<Hash, Ex> {}
 
-#[derive(Debug, parity_util_mem::MallocSizeOf)]
+#[derive(Debug, parity_util_mem::MallocSizeOf, serde::Deserialize, serde::Serialize)]
 pub struct ReadyTx<Hash, Ex> {
 	/// A reference to a transaction
@@ -106,5 +106,5 @@ qed
 
 /// Validated transactions that are block ready with all their dependencies met.
-#[derive(Debug, parity_util_mem::MallocSizeOf)]
+#[derive(Clone, Debug, parity_util_mem::MallocSizeOf, serde::Deserialize, serde::Serialize)]
 pub struct ReadyTransactions<Hash: hash::Hash + Eq, Ex> {
 	/// Next free insertion id (used to indicate when a transaction was inserted into the pool).
@@ -137,5 +137,10 @@ impl<Hash: hash::Hash + Eq, Ex> Default for ReadyTransactions<Hash, Ex> {
 }
 
-impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
+#[test_fuzz::test_fuzz_impl]
+impl<
+		Hash: std::fmt::Debug + hash::Hash + Member + Serialize,
+		Ex: Clone + std::fmt::Debug + Serialize,
+	> ReadyTransactions<Hash, Ex>
+{
 	/// Borrows a map of tags that are provided by transactions in this queue.
 	pub fn provided_tags(&self) -> &HashMap<Tag, Hash> {
@@ -175,8 +180,15 @@ impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
 	/// that are in this queue.
 	/// Returns transactions that were replaced by the one imported.
+	#[test_fuzz::test_fuzz(
+		concretize_impl = "sp_core::H256, substrate_test_runtime::Extrinsic",
+		bounds = "Hash: Eq + hash::Hash"
+	)]
 	pub fn import(
 		&mut self,
 		tx: WaitingTransaction<Hash, Ex>,
 	) -> error::Result<Vec<Arc<Transaction<Hash, Ex>>>> {
+		if !tx.is_ready() {
+			return Ok(Vec::default());
+		}
 		assert!(
 			tx.is_ready(),
@@ -184,4 +196,7 @@ impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
 			tx.missing_tags
 		);
+		if self.ready.read().contains_key(&tx.transaction.hash) {
+			return Ok(Vec::default());
+		}
 		assert!(
 			!self.ready.read().contains_key(&tx.transaction.hash),
@@ -203,4 +218,7 @@ impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
 			// Check if the transaction that satisfies the tag is still in the queue.
 			if let Some(other) = self.provided_tags.get(tag) {
+				if ready.get_mut(other).is_none() {
+					return Ok(Vec::default());
+				}
 				let tx = ready.get_mut(other).expect(HASH_READY);
 				tx.unlocks.push(hash.clone());
@@ -432,5 +450,5 @@ impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
 			// early exit if we are not replacing anything.
 			if replace_hashes.is_empty() {
-				return Ok((vec![], vec![]))
+				return Ok((vec![], vec![]));
 			}
 
@@ -448,5 +466,5 @@ impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
 			// bail - the transaction has too low priority to replace the old ones
 			if old_priority >= tx.priority {
-				return Err(error::Error::TooLowPriority { old: old_priority, new: tx.priority })
+				return Err(error::Error::TooLowPriority { old: old_priority, new: tx.priority });
 			}
 
@@ -549,5 +567,5 @@ impl<Hash: hash::Hash + Member, Ex> Iterator for BestIterator<Hash, Ex> {
 					hash
 				);
-				continue
+				continue;
 			}
 
@@ -575,5 +593,5 @@ impl<Hash: hash::Hash + Member, Ex> Iterator for BestIterator<Hash, Ex> {
 			}
 
-			return Some(best.transaction)
+			return Some(best.transaction);
 		}
 	}
@@ -606,5 +624,8 @@ mod tests {
 	}
 
-	fn import<H: hash::Hash + Eq + Member + Serialize, Ex>(
+	fn import<
+		H: std::fmt::Debug + hash::Hash + Eq + Member + Serialize,
+		Ex: Clone + std::fmt::Debug + Serialize,
+	>(
 		ready: &mut ReadyTransactions<H, Ex>,
 		tx: Transaction<H, Ex>,
@@ -774,16 +795,16 @@ mod tests {
 		// higher priority = better
 		assert!(
-			TransactionRef { transaction: Arc::new(with_priority(3, 3)), insertion_id: 1 } >
-				TransactionRef { transaction: Arc::new(with_priority(2, 3)), insertion_id: 2 }
+			TransactionRef { transaction: Arc::new(with_priority(3, 3)), insertion_id: 1 }
+				> TransactionRef { transaction: Arc::new(with_priority(2, 3)), insertion_id: 2 }
 		);
 		// lower validity = better
 		assert!(
-			TransactionRef { transaction: Arc::new(with_priority(3, 2)), insertion_id: 1 } >
-				TransactionRef { transaction: Arc::new(with_priority(3, 3)), insertion_id: 2 }
+			TransactionRef { transaction: Arc::new(with_priority(3, 2)), insertion_id: 1 }
+				> TransactionRef { transaction: Arc::new(with_priority(3, 3)), insertion_id: 2 }
 		);
 		// lower insertion_id = better
 		assert!(
-			TransactionRef { transaction: Arc::new(with_priority(3, 3)), insertion_id: 1 } >
-				TransactionRef { transaction: Arc::new(with_priority(3, 3)), insertion_id: 2 }
+			TransactionRef { transaction: Arc::new(with_priority(3, 3)), insertion_id: 1 }
+				> TransactionRef { transaction: Arc::new(with_priority(3, 3)), insertion_id: 2 }
 		);
 	}
diff --git a/client/transaction-pool/src/graph/tracked_map.rs b/client/transaction-pool/src/graph/tracked_map.rs
index 32d04b0068..3691ef0ffb 100644
--- a/client/transaction-pool/src/graph/tracked_map.rs
+++ b/client/transaction-pool/src/graph/tracked_map.rs
@@ -34,6 +34,9 @@ pub trait Size {
 ///
 /// Size reported might be slightly off and only approximately true.
-#[derive(Debug, parity_util_mem::MallocSizeOf)]
-pub struct TrackedMap<K, V> {
+#[derive(Debug, parity_util_mem::MallocSizeOf, serde::Deserialize, serde::Serialize)]
+pub struct TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
 	index: Arc<RwLock<HashMap<K, V>>>,
 	bytes: AtomicIsize,
@@ -41,5 +44,21 @@ pub struct TrackedMap<K, V> {
 }
 
-impl<K, V> Default for TrackedMap<K, V> {
+impl<K: Clone, V: Clone> Clone for TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
+	fn clone(&self) -> Self {
+		Self {
+			index: Arc::new(self.clone_map().into()),
+			bytes: self.bytes.load(AtomicOrdering::Relaxed).into(),
+			length: self.length.load(AtomicOrdering::Relaxed).into(),
+		}
+	}
+}
+
+impl<K, V> Default for TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
 	fn default() -> Self {
 		Self { index: Arc::new(HashMap::default().into()), bytes: 0.into(), length: 0.into() }
@@ -47,5 +66,8 @@ impl<K, V> Default for TrackedMap<K, V> {
 }
 
-impl<K, V> TrackedMap<K, V> {
+impl<K, V> TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
 	/// Current tracked length of the content.
 	pub fn len(&self) -> usize {
@@ -73,5 +95,8 @@ impl<K, V> TrackedMap<K, V> {
 }
 
-impl<K: Clone, V: Clone> TrackedMap<K, V> {
+impl<K: Clone, V: Clone> TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
 	/// Clone the inner map.
 	pub fn clone_map(&self) -> HashMap<K, V> {
diff --git a/primitives/runtime/src/transaction_validity.rs b/primitives/runtime/src/transaction_validity.rs
index 29c8b54231..c1b3516442 100644
--- a/primitives/runtime/src/transaction_validity.rs
+++ b/primitives/runtime/src/transaction_validity.rs
@@ -132,8 +132,10 @@ impl From<UnknownTransaction> for &'static str {
 	fn from(unknown: UnknownTransaction) -> &'static str {
 		match unknown {
-			UnknownTransaction::CannotLookup =>
-				"Could not lookup information required to validate the transaction",
-			UnknownTransaction::NoUnsignedValidator =>
-				"Could not find an unsigned validator for the unsigned transaction",
+			UnknownTransaction::CannotLookup => {
+				"Could not lookup information required to validate the transaction"
+			}
+			UnknownTransaction::NoUnsignedValidator => {
+				"Could not find an unsigned validator for the unsigned transaction"
+			}
 			UnknownTransaction::Custom(_) => "UnknownTransaction custom error",
 		}
@@ -229,4 +231,5 @@ impl From<UnknownTransaction> for TransactionValidity {
 	Copy, Clone, PartialEq, Eq, Encode, Decode, RuntimeDebug, parity_util_mem::MallocSizeOf,
 )]
+#[cfg_attr(feature = "std", derive(serde::Deserialize, serde::Serialize))]
 pub enum TransactionSource {
 	/// Transaction is already included in block.
diff --git a/test-utils/runtime/src/lib.rs b/test-utils/runtime/src/lib.rs
index 5c9dfeca0a..a2ead89189 100644
--- a/test-utils/runtime/src/lib.rs
+++ b/test-utils/runtime/src/lib.rs
@@ -177,4 +177,16 @@ impl serde::Serialize for Extrinsic {
 }
 
+#[cfg(feature = "std")]
+impl<'de> serde::Deserialize<'de> for Extrinsic {
+	fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
+	where
+		D: serde::Deserializer<'de>,
+	{
+		let mut bytes = <Vec<u8>>::deserialize(deserializer)?;
+		let mut slice = &bytes[..];
+		Self::decode(&mut slice).map_err(serde::de::Error::custom)
+	}
+}
+
 impl BlindCheckable for Extrinsic {
 	type Checked = Self;
@@ -183,5 +195,5 @@ impl BlindCheckable for Extrinsic {
 		match self {
 			Extrinsic::AuthoritiesChange(new_auth) => Ok(Extrinsic::AuthoritiesChange(new_auth)),
-			Extrinsic::Transfer { transfer, signature, exhaust_resources_when_not_first } =>
+			Extrinsic::Transfer { transfer, signature, exhaust_resources_when_not_first } => {
 				if sp_runtime::verify_encoded_lazy(&signature, &transfer, &transfer.from) {
 					Ok(Extrinsic::Transfer {
@@ -192,5 +204,6 @@ impl BlindCheckable for Extrinsic {
 				} else {
 					Err(InvalidTransaction::BadProof.into())
-				},
+				}
+			}
 			Extrinsic::IncludeData(v) => Ok(Extrinsic::IncludeData(v)),
 			Extrinsic::StorageChange(key, value) => Ok(Extrinsic::StorageChange(key, value)),
@@ -497,11 +510,11 @@ impl frame_support::traits::PalletInfo for Runtime {
 		let type_id = sp_std::any::TypeId::of::<P>();
 		if type_id == sp_std::any::TypeId::of::<system::Pallet<Runtime>>() {
-			return Some(0)
+			return Some(0);
 		}
 		if type_id == sp_std::any::TypeId::of::<pallet_timestamp::Pallet<Runtime>>() {
-			return Some(1)
+			return Some(1);
 		}
 		if type_id == sp_std::any::TypeId::of::<pallet_babe::Pallet<Runtime>>() {
-			return Some(2)
+			return Some(2);
 		}
 
@@ -511,11 +524,11 @@ impl frame_support::traits::PalletInfo for Runtime {
 		let type_id = sp_std::any::TypeId::of::<P>();
 		if type_id == sp_std::any::TypeId::of::<system::Pallet<Runtime>>() {
-			return Some("System")
+			return Some("System");
 		}
 		if type_id == sp_std::any::TypeId::of::<pallet_timestamp::Pallet<Runtime>>() {
-			return Some("Timestamp")
+			return Some("Timestamp");
 		}
 		if type_id == sp_std::any::TypeId::of::<pallet_babe::Pallet<Runtime>>() {
-			return Some("Babe")
+			return Some("Babe");
 		}
 
@@ -525,11 +538,11 @@ impl frame_support::traits::PalletInfo for Runtime {
 		let type_id = sp_std::any::TypeId::of::<P>();
 		if type_id == sp_std::any::TypeId::of::<system::Pallet<Runtime>>() {
-			return Some("system")
+			return Some("system");
 		}
 		if type_id == sp_std::any::TypeId::of::<pallet_timestamp::Pallet<Runtime>>() {
-			return Some("pallet_timestamp")
+			return Some("pallet_timestamp");
 		}
 		if type_id == sp_std::any::TypeId::of::<pallet_babe::Pallet<Runtime>>() {
-			return Some("pallet_babe")
+			return Some("pallet_babe");
 		}
 
@@ -540,11 +553,11 @@ impl frame_support::traits::PalletInfo for Runtime {
 		let type_id = sp_std::any::TypeId::of::<P>();
 		if type_id == sp_std::any::TypeId::of::<system::Pallet<Runtime>>() {
-			return Some(system::Pallet::<Runtime>::crate_version())
+			return Some(system::Pallet::<Runtime>::crate_version());
 		}
 		if type_id == sp_std::any::TypeId::of::<pallet_timestamp::Pallet<Runtime>>() {
-			return Some(pallet_timestamp::Pallet::<Runtime>::crate_version())
+			return Some(pallet_timestamp::Pallet::<Runtime>::crate_version());
 		}
 		if type_id == sp_std::any::TypeId::of::<pallet_babe::Pallet<Runtime>>() {
-			return Some(pallet_babe::Pallet::<Runtime>::crate_version())
+			return Some(pallet_babe::Pallet::<Runtime>::crate_version());
 		}
 
