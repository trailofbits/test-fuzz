diff --git a/pallets/template/Cargo.toml b/pallets/template/Cargo.toml
index 8ab1cc5..4edd2c2 100644
--- a/pallets/template/Cargo.toml
+++ b/pallets/template/Cargo.toml
@@ -39,2 +39,8 @@ std = [
 runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
 try-runtime = ["frame-support/try-runtime"]
+
+[dependencies.test-fuzz]
+path = "../../../../test-fuzz"
+
+[dependencies.serde]
+version = '1.0.130'
diff --git a/pallets/template/src/lib.rs b/pallets/template/src/lib.rs
index 067c7ce..4fe1928 100644
--- a/pallets/template/src/lib.rs
+++ b/pallets/template/src/lib.rs
@@ -20,4 +20,30 @@ pub mod pallet {
 	use frame_system::pallet_prelude::*;
 
+	#[cfg(test)]
+	test_fuzz::dont_care!(crate::mock::Test);
+
+	type AccountIdFor<T> = <T as frame_system::Config>::AccountId;
+
+	#[derive(Clone, serde::Deserialize, serde::Serialize)]
+	struct SerializableAccountId<AccountId>(Option<AccountId>);
+
+	impl<Origin, AccountId> From<Origin> for SerializableAccountId<AccountId>
+	where
+		Origin: Into<Result<frame_system::RawOrigin<AccountId>, Origin>>,
+	{
+		fn from(origin: Origin) -> Self {
+			Self(ensure_signed(origin).ok())
+		}
+	}
+
+	impl<Origin, AccountId> test_fuzz::Into<Origin> for SerializableAccountId<AccountId>
+	where
+		Origin: From<frame_system::RawOrigin<AccountId>>,
+	{
+		fn into(self) -> Origin {
+			frame_system::RawOrigin::from(self.0).into()
+		}
+	}
+
 	/// Configure the pallet by specifying the parameters and types on which it depends.
 	#[pallet::config]
@@ -62,8 +88,18 @@ pub mod pallet {
 	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
 	#[pallet::call]
-	impl<T: Config> Pallet<T> {
+	#[test_fuzz::test_fuzz_impl]
+	impl<T: Config> Pallet<T>
+	where
+		T: serde::Serialize,
+	{
 		/// An example dispatchable that takes a singles value as a parameter, writes the value to
 		/// storage and emits an event. This function must be dispatched by a signed extrinsic.
 		#[pallet::weight(10_000 + T::DbWeight::get().writes(1))]
+		#[test_fuzz::test_fuzz(
+			bounds = "T: frame_system::Config",
+			concretize_impl = "crate::mock::Test",
+			convert = "OriginFor<T>, SerializableAccountId<AccountIdFor<T>>",
+			execute_with = "crate::mock::new_test_ext().execute_with"
+		)]
 		pub fn do_something(origin: OriginFor<T>, something: u32) -> DispatchResult {
 			// Check that the extrinsic was signed and get the signer.
