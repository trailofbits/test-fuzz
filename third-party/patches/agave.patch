diff --git a/compute-budget/Cargo.toml b/compute-budget/Cargo.toml
index bbcaa27..a34b9bf 100644
--- a/compute-budget/Cargo.toml
+++ b/compute-budget/Cargo.toml
@@ -14,4 +14,6 @@ solana-frozen-abi = { workspace = true, optional = true }
 solana-sdk = { workspace = true }
 
+serde = { workspace = true }
+
 [build-dependencies]
 rustc_version = { workspace = true, optional = true }
diff --git a/compute-budget/src/compute_budget.rs b/compute-budget/src/compute_budget.rs
index da04296..77be32c 100644
--- a/compute-budget/src/compute_budget.rs
+++ b/compute-budget/src/compute_budget.rs
@@ -19,5 +19,5 @@ pub const MAX_CALL_DEPTH: usize = 64;
 pub const STACK_FRAME_SIZE: usize = 4096;
 
-#[derive(Clone, Copy, Debug, PartialEq, Eq)]
+#[derive(Clone, Copy, Debug, PartialEq, Eq, serde::Deserialize, serde::Serialize)]
 pub struct ComputeBudget {
     /// Number of compute units that a transaction or individual instruction is
diff --git a/log-collector/Cargo.toml b/log-collector/Cargo.toml
index e22c14c..4d5f335 100644
--- a/log-collector/Cargo.toml
+++ b/log-collector/Cargo.toml
@@ -13,4 +13,6 @@ edition = { workspace = true }
 log = { workspace = true }
 
+serde = { workspace = true }
+
 [package.metadata.docs.rs]
 targets = ["x86_64-unknown-linux-gnu"]
diff --git a/log-collector/src/lib.rs b/log-collector/src/lib.rs
index 612300f..fbc8225 100644
--- a/log-collector/src/lib.rs
+++ b/log-collector/src/lib.rs
@@ -4,4 +4,5 @@ use std::{cell::RefCell, rc::Rc};
 const LOG_MESSAGES_BYTES_LIMIT: usize = 10 * 1000;
 
+#[derive(Clone, Debug, serde::Deserialize, serde::Serialize)]
 pub struct LogCollector {
     pub messages: Vec<String>,
diff --git a/measure/src/measure.rs b/measure/src/measure.rs
index 190abb3..c157072 100644
--- a/measure/src/measure.rs
+++ b/measure/src/measure.rs
@@ -4,5 +4,5 @@ use std::{
 };
 
-#[derive(Debug)]
+#[derive(Debug, Clone)]
 pub struct Measure {
     name: &'static str,
diff --git a/program-runtime/Cargo.toml b/program-runtime/Cargo.toml
index 413f7b7..007bd73 100644
--- a/program-runtime/Cargo.toml
+++ b/program-runtime/Cargo.toml
@@ -35,4 +35,6 @@ solana_rbpf = { workspace = true }
 thiserror = { workspace = true }
 
+test-fuzz = { path = "../../../test-fuzz" }
+
 [dev-dependencies]
 assert_matches = { workspace = true }
diff --git a/program-runtime/src/invoke_context.rs b/program-runtime/src/invoke_context.rs
index 96079b9..d708725 100644
--- a/program-runtime/src/invoke_context.rs
+++ b/program-runtime/src/invoke_context.rs
@@ -117,4 +117,5 @@ impl fmt::Display for AllocErr {
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct BpfAllocator {
     len: u64,
@@ -145,10 +146,16 @@ impl BpfAllocator {
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct EnvironmentConfig<'a> {
     pub blockhash: Hash,
     epoch_total_stake: Option<u64>,
+    #[serde(skip)]
     epoch_vote_accounts: Option<&'a VoteAccountsHashMap>,
     pub feature_set: Arc<FeatureSet>,
     pub lamports_per_signature: u64,
+    #[serde(
+        serialize_with = "test_fuzz::serialize_ref",
+        deserialize_with = "test_fuzz::deserialize_ref"
+    )]
     sysvar_cache: &'a SysvarCache,
 }
@@ -173,4 +180,5 @@ impl<'a> EnvironmentConfig<'a> {
 }
 
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct SyscallContext {
     pub allocator: BpfAllocator,
@@ -179,5 +187,11 @@ pub struct SyscallContext {
 }
 
-#[derive(Debug, Clone)]
+impl std::fmt::Debug for SyscallContext {
+    fn fmt(&self, _f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
+        Ok(())
+    }
+}
+
+#[derive(Debug, Clone, serde::Deserialize, serde::Serialize)]
 pub struct SerializedAccountMetadata {
     pub original_data_len: usize,
@@ -188,9 +202,27 @@ pub struct SerializedAccountMetadata {
 }
 
+fn default_program_cache_for_tx_batch<'de, D>(
+    _: D,
+) -> Result<&'static mut ProgramCacheForTxBatch, D::Error>
+where
+    D: serde::Deserializer<'de>,
+{
+    Ok(Box::leak(Box::new(ProgramCacheForTxBatch::default())))
+}
+
 /// Main pipeline from runtime to program execution.
+#[derive(serde::Deserialize, serde::Serialize)]
 pub struct InvokeContext<'a> {
     /// Information about the currently executing transaction.
+    #[serde(
+        serialize_with = "test_fuzz::serialize_ref_mut",
+        deserialize_with = "test_fuzz::deserialize_ref_mut"
+    )]
     pub transaction_context: &'a mut TransactionContext,
     /// The local program cache for the transaction batch.
+    #[serde(
+        skip_serializing,
+        deserialize_with = "default_program_cache_for_tx_batch"
+    )]
     pub program_cache_for_tx_batch: &'a mut ProgramCacheForTxBatch,
     /// Runtime configurations used to provision the invocation environment.
@@ -203,4 +235,5 @@ pub struct InvokeContext<'a> {
     log_collector: Option<Rc<RefCell<LogCollector>>>,
     /// Latest measurement not yet accumulated in [ExecuteDetailsTimings::execute_us]
+    #[serde(skip)]
     pub execute_time: Option<Measure>,
     pub timings: ExecuteDetailsTimings,
@@ -209,4 +242,23 @@ pub struct InvokeContext<'a> {
 }
 
+impl<'a> Clone for InvokeContext<'a> {
+    fn clone(&self) -> Self {
+        Self {
+            transaction_context: Box::leak(Box::new(self.transaction_context.clone())),
+            program_cache_for_tx_batch: Box::leak(Box::new(
+                self.program_cache_for_tx_batch.clone(),
+            )),
+            environment_config: self.environment_config.clone(),
+            compute_budget: self.compute_budget.clone(),
+            compute_meter: self.compute_meter.clone(),
+            log_collector: self.log_collector.clone(),
+            execute_time: self.execute_time.clone(),
+            timings: self.timings.clone(),
+            syscall_context: self.syscall_context.clone(),
+            traces: self.traces.clone(),
+        }
+    }
+}
+
 impl<'a> InvokeContext<'a> {
     #[allow(clippy::too_many_arguments)]
diff --git a/program-runtime/src/sysvar_cache.rs b/program-runtime/src/sysvar_cache.rs
index 79124bd..acdaa87 100644
--- a/program-runtime/src/sysvar_cache.rs
+++ b/program-runtime/src/sysvar_cache.rs
@@ -25,5 +25,5 @@ impl ::solana_frozen_abi::abi_example::AbiExample for SysvarCache {
 }
 
-#[derive(Default, Clone, Debug)]
+#[derive(Default, Clone, Debug, serde::Deserialize, serde::Serialize)]
 pub struct SysvarCache {
     // full account data as provided by bank, including any trailing zero bytes
diff --git a/programs/bpf_loader/Cargo.toml b/programs/bpf_loader/Cargo.toml
index ace6f2e..e8b9d0b 100644
--- a/programs/bpf_loader/Cargo.toml
+++ b/programs/bpf_loader/Cargo.toml
@@ -30,4 +30,7 @@ solana_rbpf = { workspace = true }
 thiserror = { workspace = true }
 
+serde = { workspace = true }
+test-fuzz = { path = "../../../../test-fuzz" }
+
 [dev-dependencies]
 assert_matches = { workspace = true }
diff --git a/programs/bpf_loader/src/lib.rs b/programs/bpf_loader/src/lib.rs
index 58ef907..ee3c3db 100644
--- a/programs/bpf_loader/src/lib.rs
+++ b/programs/bpf_loader/src/lib.rs
@@ -395,6 +395,7 @@ declare_builtin_function!(
 );
 
-pub fn process_instruction_inner(
-    invoke_context: &mut InvokeContext,
+#[test_fuzz::test_fuzz]
+pub fn process_instruction_inner<'a>(
+    invoke_context: &mut InvokeContext<'a>,
 ) -> Result<u64, Box<dyn std::error::Error>> {
     let log_collector = invoke_context.get_log_collector();
diff --git a/sdk/Cargo.toml b/sdk/Cargo.toml
index faf3867..52c2aac 100644
--- a/sdk/Cargo.toml
+++ b/sdk/Cargo.toml
@@ -75,5 +75,5 @@ qualifier_attr = { workspace = true, optional = true }
 rand = { workspace = true, optional = true }
 rand0-7 = { package = "rand", version = "0.7", optional = true }
-serde = { workspace = true }
+serde = { workspace = true, features = ["rc"] }
 serde_bytes = { workspace = true }
 serde_derive = { workspace = true }
@@ -96,4 +96,6 @@ thiserror = { workspace = true }
 uriparse = { workspace = true }
 
+test-fuzz = { path = "../../../test-fuzz" }
+
 [target.'cfg(target_arch = "wasm32")'.dependencies]
 getrandom = { version = "0.1", features = ["wasm-bindgen"] }
diff --git a/sdk/src/feature_set.rs b/sdk/src/feature_set.rs
index 7322fdb..78a6ca1 100644
--- a/sdk/src/feature_set.rs
+++ b/sdk/src/feature_set.rs
@@ -1096,5 +1096,5 @@ lazy_static! {
 /// `FeatureSet` holds the set of currently active/inactive runtime features
 #[cfg_attr(feature = "frozen-abi", derive(AbiExample))]
-#[derive(Debug, Clone, Eq, PartialEq)]
+#[derive(Debug, Clone, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct FeatureSet {
     pub active: HashMap<Pubkey, Slot>,
diff --git a/sdk/src/transaction_context.rs b/sdk/src/transaction_context.rs
index 0bb2f0e..72c11c2 100644
--- a/sdk/src/transaction_context.rs
+++ b/sdk/src/transaction_context.rs
@@ -36,5 +36,5 @@ pub type IndexOfAccount = u16;
 ///
 /// It also contains indices to other structures for faster lookup.
-#[derive(Clone, Debug, Eq, PartialEq)]
+#[derive(Clone, Debug, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct InstructionAccount {
     /// Points to the account and its key in the `TransactionContext`
@@ -57,5 +57,5 @@ pub struct InstructionAccount {
 pub type TransactionAccount = (Pubkey, AccountSharedData);
 
-#[derive(Clone, Debug, PartialEq)]
+#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct TransactionAccounts {
     accounts: Vec<RefCell<AccountSharedData>>,
@@ -130,9 +130,31 @@ impl TransactionAccounts {
 }
 
+fn serialize_account_keys<'a, S>(
+    account_keys: &Pin<Box<[Pubkey]>>,
+    serializer: S,
+) -> Result<S::Ok, S::Error>
+where
+    S: serde::Serializer,
+{
+    <[Pubkey] as serde::Serialize>::serialize(&**account_keys, serializer)
+}
+
+fn deserialize_account_keys<'de, D>(deserializer: D) -> Result<Pin<Box<[Pubkey]>>, D::Error>
+where
+    D: serde::Deserializer<'de>,
+{
+    let account_keys = <Vec<Pubkey> as serde::de::Deserialize>::deserialize(deserializer)?;
+    Ok(Pin::new(account_keys.into_boxed_slice()))
+}
+
 /// Loaded transaction shared between runtime and programs.
 ///
 /// This context is valid for the entire duration of a transaction being processed.
-#[derive(Debug, Clone, PartialEq)]
+#[derive(Debug, Clone, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct TransactionContext {
+    #[serde(
+        serialize_with = "serialize_account_keys",
+        deserialize_with = "deserialize_account_keys"
+    )]
     account_keys: Pin<Box<[Pubkey]>>,
     accounts: Rc<TransactionAccounts>,
@@ -185,7 +207,7 @@ impl TransactionContext {
         }
 
-        Ok(Rc::try_unwrap(self.accounts)
-            .expect("transaction_context.accounts has unexpected outstanding refs")
-            .into_accounts())
+        // smoelius: Our implementation of `Clone` for `InvokeContext` leaks a copy of a
+        // `TransactionContext`, which is why a call to `Rc::try_unwrap(self.accounts)` would fail.
+        Ok((*self.accounts).clone().into_accounts())
     }
 
@@ -450,5 +472,5 @@ pub struct TransactionReturnData {
 ///
 /// This context is valid for the entire duration of a (possibly cross program) instruction being processed.
-#[derive(Debug, Clone, Default, Eq, PartialEq)]
+#[derive(Debug, Clone, Default, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
 pub struct InstructionContext {
     nesting_level: usize,
diff --git a/timings/Cargo.toml b/timings/Cargo.toml
index e36975b..84ce3a0 100644
--- a/timings/Cargo.toml
+++ b/timings/Cargo.toml
@@ -15,4 +15,6 @@ enum-iterator = { workspace = true }
 solana-sdk = { workspace = true }
 
+serde = { workspace = true }
+
 [package.metadata.docs.rs]
 targets = ["x86_64-unknown-linux-gnu"]
diff --git a/timings/src/lib.rs b/timings/src/lib.rs
index 4687855..2013968 100644
--- a/timings/src/lib.rs
+++ b/timings/src/lib.rs
@@ -11,5 +11,5 @@ use {
 };
 
-#[derive(Default, Debug, PartialEq, Eq)]
+#[derive(Default, Debug, PartialEq, Eq, Clone, serde::Deserialize, serde::Serialize)]
 pub struct ProgramTiming {
     pub accumulated_us: u64,
@@ -366,5 +366,5 @@ impl ExecuteAccessoryTimings {
 }
 
-#[derive(Default, Debug, PartialEq, Eq)]
+#[derive(Default, Debug, PartialEq, Eq, Clone, serde::Deserialize, serde::Serialize)]
 pub struct ExecuteDetailsTimings {
     pub serialize_us: u64,
