diff --git a/Cargo.toml b/Cargo.toml
index f56084e..1fa2416 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -31,4 +31,7 @@ shuttle = { version = "0.7.1", optional = true }
 thiserror = "2.0.9"
 
+serde = "1.0"
+test-fuzz = { path = "../../test-fuzz" }
+
 [target.'cfg(windows)'.dependencies]
 winapi = { version = "0.3", features = ["memoryapi", "sysinfoapi", "winnt", "errhandlingapi"], optional = true }
@@ -49,2 +52,4 @@ elf = "0.0.10"
 json = "0.12"
 test_utils = { path = "test_utils/" }
+
+[workspace]
diff --git a/src/memory_region.rs b/src/memory_region.rs
index d71c9dc..9db1836 100644
--- a/src/memory_region.rs
+++ b/src/memory_region.rs
@@ -58,4 +58,85 @@ pub struct MemoryRegion {
 }
 
+#[derive(serde::Deserialize, serde::Serialize)]
+struct SerializableMemoryRegion {
+    host_mem_seed: Option<u64>,
+    vm_addr: u64,
+    len: u64,
+    vm_gap_shift: u8,
+    writable: bool,
+    access_violation_handler_payload: Option<u16>,
+}
+
+impl From<SerializableMemoryRegion> for MemoryRegion {
+    fn from(value: SerializableMemoryRegion) -> Self {
+        use rand::{rngs::StdRng, RngCore, SeedableRng};
+        let SerializableMemoryRegion {
+            host_mem_seed,
+            vm_addr,
+            len,
+            vm_gap_shift,
+            writable,
+            access_violation_handler_payload,
+        } = value;
+        if len > 0x100000000 {
+            std::process::exit(0);
+        }
+        let mut bytes = vec![0u8; len as usize];
+        if let Some(seed) = host_mem_seed {
+            let mut rng: StdRng = SeedableRng::seed_from_u64(seed);
+            rng.fill_bytes(&mut bytes);
+        };
+        Self {
+            host_addr: bytes.leak().as_ptr() as u64,
+            vm_addr,
+            len,
+            vm_gap_shift,
+            writable,
+            access_violation_handler_payload,
+        }
+    }
+}
+
+impl From<&MemoryRegion> for SerializableMemoryRegion {
+    fn from(value: &MemoryRegion) -> Self {
+        let MemoryRegion {
+            host_addr: _,
+            vm_addr,
+            len,
+            vm_gap_shift,
+            writable,
+            access_violation_handler_payload,
+        } = value;
+        Self {
+            host_mem_seed: None,
+            vm_addr: *vm_addr,
+            len: *len,
+            vm_gap_shift: *vm_gap_shift,
+            writable: *writable,
+            access_violation_handler_payload: access_violation_handler_payload.clone(),
+        }
+    }
+}
+
+impl<'de> serde::Deserialize<'de> for MemoryRegion {
+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
+    where
+        D: serde::Deserializer<'de>,
+    {
+        let value = SerializableMemoryRegion::deserialize(deserializer)?;
+        Ok(Self::from(value))
+    }
+}
+
+impl serde::Serialize for MemoryRegion {
+    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
+    where
+        S: serde::Serializer,
+    {
+        let value = SerializableMemoryRegion::from(self);
+        value.serialize(serializer)
+    }
+}
+
 impl MemoryRegion {
     fn new(slice: &[u8], vm_addr: u64, vm_gap_size: u64, writable: bool) -> Self {
@@ -173,10 +254,13 @@ pub enum AccessType {
 
 /// Common parts of [UnalignedMemoryMapping] and [AlignedMemoryMapping]
+#[derive(serde::Deserialize, serde::Serialize)]
 pub struct CommonMemoryMapping<'a> {
     /// Mapped memory regions
     regions: Box<[MemoryRegion]>,
     /// Access violation handler
+    #[serde(skip, default = "boxed_default_access_violation_handler")]
     access_violation_handler: AccessViolationHandler,
     /// VM configuration
+    #[serde(with = "test_fuzz::serde_ref")]
     config: &'a Config,
     /// Executable sbpf_version
@@ -184,4 +268,19 @@ pub struct CommonMemoryMapping<'a> {
 }
 
+impl Clone for CommonMemoryMapping<'_> {
+    fn clone(&self) -> Self {
+        Self {
+            regions: self.regions.clone(),
+            access_violation_handler: boxed_default_access_violation_handler(),
+            config: self.config,
+            sbpf_version: self.sbpf_version,
+        }
+    }
+}
+
+fn boxed_default_access_violation_handler() -> AccessViolationHandler {
+    Box::new(default_access_violation_handler)
+}
+
 impl CommonMemoryMapping<'_> {
     fn generate_access_violation(
@@ -234,4 +333,39 @@ pub struct UnalignedMemoryMapping<'a> {
 }
 
+impl<'de> serde::Deserialize<'de> for UnalignedMemoryMapping<'_> {
+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
+    where
+        D: serde::Deserializer<'de>,
+    {
+        let common = CommonMemoryMapping::deserialize(deserializer)?;
+        Ok(Self {
+            common,
+            region_addresses: Box::new([]),
+            region_index_lookup: Box::new([]),
+            cache: UnsafeCell::new(MappingCache::new()),
+        })
+    }
+}
+
+impl serde::Serialize for UnalignedMemoryMapping<'_> {
+    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
+    where
+        S: serde::Serializer,
+    {
+        self.common.serialize(serializer)
+    }
+}
+
+impl Clone for UnalignedMemoryMapping<'_> {
+    fn clone(&self) -> Self {
+        Self {
+            common: self.common.clone(),
+            region_addresses: self.region_addresses.clone(),
+            region_index_lookup: self.region_index_lookup.clone(),
+            cache: UnsafeCell::new(unsafe { &*self.cache.get() as &MappingCache }.clone()),
+        }
+    }
+}
+
 impl fmt::Debug for UnalignedMemoryMapping<'_> {
     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
@@ -340,4 +474,5 @@ impl<'a> UnalignedMemoryMapping<'a> {
 /// Memory mapping that uses the upper half of an address to identify the
 /// underlying memory region.
+#[derive(Clone, serde::Deserialize, serde::Serialize)]
 pub struct AlignedMemoryMapping<'a> {
     /// Common parts
@@ -415,5 +550,5 @@ impl<'a> AlignedMemoryMapping<'a> {
 
 /// Maps virtual memory to host memory.
-#[derive(Debug)]
+#[derive(Debug, Clone, serde::Deserialize, serde::Serialize)]
 pub enum MemoryMapping<'a> {
     /// Used when address translation is disabled
@@ -599,5 +734,5 @@ impl<'a> MemoryMapping<'a> {
 
 /// Fast, small linear cache used to speed up unaligned memory mapping.
-#[derive(Debug)]
+#[derive(Debug, Clone)]
 struct MappingCache {
     // The cached entries.
diff --git a/src/program.rs b/src/program.rs
index 79705c4..70ca947 100644
--- a/src/program.rs
+++ b/src/program.rs
@@ -10,5 +10,5 @@ use {
 
 /// Defines a set of sbpf_version of an executable
-#[derive(Debug, PartialEq, PartialOrd, Eq, Clone, Copy)]
+#[derive(Debug, PartialEq, PartialOrd, Eq, Clone, Copy, serde::Deserialize, serde::Serialize)]
 pub enum SBPFVersion {
     /// The legacy format
@@ -323,5 +323,5 @@ impl<C: ContextObject> std::fmt::Debug for BuiltinProgram<C> {
 #[macro_export]
 macro_rules! declare_builtin_function {
-    ($(#[$attr:meta])* $name:ident $(<$($generic_ident:tt : $generic_type:tt),+>)?, fn rust(
+    ($(#[$attr:meta])* $name:ident, fn rust $(<$($lifetime:tt),+>)? (
         $vm:ident : &mut $ContextObject:ty,
         $arg_a:ident : u64,
@@ -334,7 +334,9 @@ macro_rules! declare_builtin_function {
         $(#[$attr])*
         pub struct $name {}
+        #[test_fuzz::test_fuzz_impl]
         impl $name {
             /// Rust interface
-            pub fn rust $(<$($generic_ident : $generic_type),+>)? (
+            #[test_fuzz::test_fuzz(enable_in_production)]
+            pub fn rust $(<$($lifetime),+>)? (
                 $vm: &mut $ContextObject,
                 $arg_a: u64,
@@ -345,9 +347,12 @@ macro_rules! declare_builtin_function {
                 $memory_mapping: &mut $MemoryMapping,
             ) -> $Result {
+                if matches!($memory_mapping, MemoryMapping::Identity) {
+                    std::process::exit(0);
+                }
                 $($rust)*
             }
             /// VM interface
             #[allow(clippy::too_many_arguments)]
-            pub fn vm $(<$($generic_ident : $generic_type),+>)? (
+            pub fn vm $(<$($lifetime),+>)? (
                 $vm: *mut $crate::vm::EbpfVm<$ContextObject>,
                 $arg_a: u64,
@@ -359,5 +364,5 @@ macro_rules! declare_builtin_function {
                 use $crate::vm::ContextObject;
                 let vm = unsafe {
-                    &mut *($vm.cast::<u64>().offset(-($crate::vm::get_runtime_environment_key() as isize)).cast::<$crate::vm::EbpfVm<$ContextObject>>())
+                    &mut *(($vm as *mut u64).offset(-($crate::vm::get_runtime_environment_key() as isize)) as *mut $crate::vm::EbpfVm<$ContextObject>)
                 };
                 let config = vm.loader.get_config();
@@ -365,5 +370,5 @@ macro_rules! declare_builtin_function {
                     vm.context_object_pointer.consume(vm.previous_instruction_meter - vm.due_insn_count);
                 }
-                let converted_result: $crate::error::ProgramResult = Self::rust $(::<$($generic_ident),+>)?(
+                let converted_result: $crate::error::ProgramResult = Self::rust(
                     vm.context_object_pointer, $arg_a, $arg_b, $arg_c, $arg_d, $arg_e, &mut vm.memory_mapping,
                 ).map_err(|err| $crate::error::EbpfError::SyscallError(err)).into();
diff --git a/src/vm.rs b/src/vm.rs
index cb068ca..2832edf 100644
--- a/src/vm.rs
+++ b/src/vm.rs
@@ -54,5 +54,5 @@ pub fn get_runtime_environment_key() -> i32 {
 
 /// VM configuration settings
-#[derive(Debug, Clone, PartialEq, Eq)]
+#[derive(Debug, Clone, PartialEq, Eq, serde::Deserialize, serde::Serialize)]
 pub struct Config {
     /// Maximum call depth
diff --git a/test_utils/Cargo.toml b/test_utils/Cargo.toml
index 9e361f0..9c44449 100644
--- a/test_utils/Cargo.toml
+++ b/test_utils/Cargo.toml
@@ -9,2 +9,5 @@ publish = false
 libc = "0.2"
 solana-sbpf = { path = "../" }
+
+serde = "1.0"
+test-fuzz = { path = "../../../test-fuzz" }
diff --git a/test_utils/src/lib.rs b/test_utils/src/lib.rs
index 0fc06bc..fb6272c 100644
--- a/test_utils/src/lib.rs
+++ b/test_utils/src/lib.rs
@@ -22,5 +22,5 @@ pub mod syscalls;
 
 /// Simple instruction meter for testing
-#[derive(Debug, Clone, Default)]
+#[derive(Debug, Clone, Default, serde::Deserialize, serde::Serialize)]
 pub struct TestContextObject {
     /// Contains the register state at every instruction in order of execution
diff --git a/test_utils/src/syscalls.rs b/test_utils/src/syscalls.rs
index 48c3a20..3ac7fe5 100644
--- a/test_utils/src/syscalls.rs
+++ b/test_utils/src/syscalls.rs
@@ -34,5 +34,5 @@ declare_builtin_function!(
     /// **unused**. Returns the number of bytes written.
     SyscallTracePrintf,
-    fn rust(
+    fn rust<'a>(
         _context_object: &mut TestContextObject,
         _arg1: u64,
@@ -41,5 +41,5 @@ declare_builtin_function!(
         arg4: u64,
         arg5: u64,
-        _memory_mapping: &mut MemoryMapping,
+        _memory_mapping: &mut MemoryMapping<'a>,
     ) -> Result<u64, Box<dyn std::error::Error>> {
         println!("bpf_trace_printf: {arg3:#x}, {arg4:#x}, {arg5:#x}");
@@ -62,5 +62,5 @@ declare_builtin_function!(
     /// each argument must be a `u64`.
     SyscallGatherBytes,
-    fn rust(
+    fn rust<'a>(
         _context_object: &mut TestContextObject,
         arg1: u64,
@@ -69,5 +69,5 @@ declare_builtin_function!(
         arg4: u64,
         arg5: u64,
-        _memory_mapping: &mut MemoryMapping,
+        _memory_mapping: &mut MemoryMapping<'a>,
     ) -> Result<u64, Box<dyn std::error::Error>> {
         Ok(arg1.wrapping_shl(32)
@@ -86,5 +86,5 @@ declare_builtin_function!(
     /// cases. Arguments 3 to 5 are unused.
     SyscallMemFrob,
-    fn rust(
+    fn rust<'a>(
         _context_object: &mut TestContextObject,
         vm_addr: u64,
@@ -93,5 +93,5 @@ declare_builtin_function!(
         _arg4: u64,
         _arg5: u64,
-        memory_mapping: &mut MemoryMapping,
+        memory_mapping: &mut MemoryMapping<'a>,
     ) -> Result<u64, Box<dyn std::error::Error>> {
         let host_addr: Result<u64, EbpfError> =
@@ -111,5 +111,5 @@ declare_builtin_function!(
     /// C-like `strcmp`, return 0 if the strings are equal, and a non-null value otherwise.
     SyscallStrCmp,
-    fn rust(
+    fn rust<'a>(
         _context_object: &mut TestContextObject,
         arg1: u64,
@@ -118,5 +118,5 @@ declare_builtin_function!(
         _arg4: u64,
         _arg5: u64,
-        memory_mapping: &mut MemoryMapping,
+        memory_mapping: &mut MemoryMapping<'a>,
     ) -> Result<u64, Box<dyn std::error::Error>> {
         // C-like strcmp, maybe shorter than converting the bytes to string and comparing?
@@ -149,5 +149,5 @@ declare_builtin_function!(
     /// Prints a NULL-terminated UTF-8 string.
     SyscallString,
-    fn rust(
+    fn rust<'a>(
         _context_object: &mut TestContextObject,
         vm_addr: u64,
@@ -156,5 +156,5 @@ declare_builtin_function!(
         _arg4: u64,
         _arg5: u64,
-        memory_mapping: &mut MemoryMapping,
+        memory_mapping: &mut MemoryMapping<'a>,
     ) -> Result<u64, Box<dyn std::error::Error>> {
         let host_addr: Result<u64, EbpfError> =
@@ -174,5 +174,5 @@ declare_builtin_function!(
     /// Prints the five arguments formated as u64 in decimal.
     SyscallU64,
-    fn rust(
+    fn rust<'a>(
         _context_object: &mut TestContextObject,
         arg1: u64,
@@ -181,5 +181,5 @@ declare_builtin_function!(
         arg4: u64,
         arg5: u64,
-        memory_mapping: &mut MemoryMapping,
+        memory_mapping: &mut MemoryMapping<'a>,
     ) -> Result<u64, Box<dyn std::error::Error>> {
         println!(
diff --git a/tests/execution.rs b/tests/execution.rs
index 967be52..8f25cbc 100644
--- a/tests/execution.rs
+++ b/tests/execution.rs
@@ -2677,5 +2677,5 @@ declare_builtin_function!(
     /// For test_nested_vm_syscall()
     SyscallNestedVm,
-    fn rust(
+    fn rust<'a>(
         _context_object: &mut TestContextObject,
         depth: u64,
@@ -2684,5 +2684,5 @@ declare_builtin_function!(
         _arg4: u64,
         _arg5: u64,
-        _memory_mapping: &mut MemoryMapping,
+        _memory_mapping: &mut MemoryMapping<'a>,
     ) -> Result<u64, Box<dyn std::error::Error>> {
         let (result, expected_result): (Result<u64, Box<dyn std::error::Error>>, ProgramResult) =
