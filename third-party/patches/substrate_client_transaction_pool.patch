diff --git a/substrate/client/transaction-pool/Cargo.toml b/substrate/client/transaction-pool/Cargo.toml
index 95b391f..fe352c5 100644
--- a/substrate/client/transaction-pool/Cargo.toml
+++ b/substrate/client/transaction-pool/Cargo.toml
@@ -23,6 +23,6 @@ futures-timer = { workspace = true }
 linked-hash-map = { workspace = true }
 log = { workspace = true, default-features = true }
-parking_lot = { workspace = true, default-features = true }
-serde = { features = ["derive"], workspace = true, default-features = true }
+parking_lot = { workspace = true, features = ["serde"] }
+serde = { features = ["derive", "rc"], workspace = true, default-features = true }
 thiserror = { workspace = true }
 prometheus-endpoint = { workspace = true, default-features = true }
@@ -37,4 +37,5 @@ sp-runtime = { workspace = true, default-features = true }
 sp-tracing = { workspace = true, default-features = true }
 sp-transaction-pool = { workspace = true, default-features = true }
+test-fuzz = { path = "../../../../../test-fuzz" }
 
 [dev-dependencies]
diff --git a/substrate/client/transaction-pool/src/graph/base_pool.rs b/substrate/client/transaction-pool/src/graph/base_pool.rs
index 3288562..0ba77bc 100644
--- a/substrate/client/transaction-pool/src/graph/base_pool.rs
+++ b/substrate/client/transaction-pool/src/graph/base_pool.rs
@@ -85,5 +85,5 @@ pub struct PruneStatus<Hash, Ex> {
 
 /// Immutable transaction
-#[derive(PartialEq, Eq, Clone)]
+#[derive(PartialEq, Eq, Clone, serde::Deserialize, serde::Serialize)]
 pub struct Transaction<Hash, Extrinsic> {
 	/// Raw extrinsic representing that transaction.
@@ -221,5 +221,7 @@ pub struct BasePool<Hash: hash::Hash + Eq, Ex> {
 }
 
-impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> Default for BasePool<Hash, Ex> {
+impl<Hash: hash::Hash + Member + Serialize, Ex: Clone + std::fmt::Debug + Serialize> Default
+	for BasePool<Hash, Ex>
+{
 	fn default() -> Self {
 		Self::new(false)
@@ -227,5 +229,7 @@ impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> Default for Bas
 }
 
-impl<Hash: hash::Hash + Member + Serialize, Ex: std::fmt::Debug> BasePool<Hash, Ex> {
+impl<Hash: hash::Hash + Member + Serialize, Ex: Clone + std::fmt::Debug + Serialize>
+	BasePool<Hash, Ex>
+{
 	/// Create new pool given reject_future_transactions flag.
 	pub fn new(reject_future_transactions: bool) -> Self {
diff --git a/substrate/client/transaction-pool/src/graph/future.rs b/substrate/client/transaction-pool/src/graph/future.rs
index bad4663..b10e15c 100644
--- a/substrate/client/transaction-pool/src/graph/future.rs
+++ b/substrate/client/transaction-pool/src/graph/future.rs
@@ -29,4 +29,5 @@ use std::time::Instant;
 use super::base_pool::Transaction;
 
+#[derive(serde::Deserialize, serde::Serialize)]
 /// Transaction with partially satisfied dependencies.
 pub struct WaitingTransaction<Hash, Ex> {
@@ -36,4 +37,5 @@ pub struct WaitingTransaction<Hash, Ex> {
 	pub missing_tags: HashSet<Tag>,
 	/// Time of import to the Future Queue.
+	#[serde(skip, default = "Instant::now")]
 	pub imported_at: Instant,
 }
diff --git a/substrate/client/transaction-pool/src/graph/ready.rs b/substrate/client/transaction-pool/src/graph/ready.rs
index b4a5d9e..f43a43d 100644
--- a/substrate/client/transaction-pool/src/graph/ready.rs
+++ b/substrate/client/transaction-pool/src/graph/ready.rs
@@ -39,5 +39,5 @@ use super::{
 ///
 /// Should be cheap to clone.
-#[derive(Debug)]
+#[derive(Debug, serde::Deserialize, serde::Serialize)]
 pub struct TransactionRef<Hash, Ex> {
 	/// The actual transaction data.
@@ -76,5 +76,5 @@ impl<Hash, Ex> PartialEq for TransactionRef<Hash, Ex> {
 impl<Hash, Ex> Eq for TransactionRef<Hash, Ex> {}
 
-#[derive(Debug)]
+#[derive(Debug, serde::Deserialize, serde::Serialize)]
 pub struct ReadyTx<Hash, Ex> {
 	/// A reference to a transaction
@@ -107,5 +107,5 @@ qed
 
 /// Validated transactions that are block ready with all their dependencies met.
-#[derive(Debug)]
+#[derive(Clone, Debug, serde::Deserialize, serde::Serialize)]
 pub struct ReadyTransactions<Hash: hash::Hash + Eq, Ex> {
 	/// Next free insertion id (used to indicate when a transaction was inserted into the pool).
@@ -138,5 +138,10 @@ impl<Hash: hash::Hash + Eq, Ex> Default for ReadyTransactions<Hash, Ex> {
 }
 
-impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
+#[test_fuzz::test_fuzz_impl]
+impl<
+		Hash: std::fmt::Debug + hash::Hash + Member + Serialize,
+		Ex: Clone + std::fmt::Debug + Serialize,
+	> ReadyTransactions<Hash, Ex>
+{
 	/// Borrows a map of tags that are provided by transactions in this queue.
 	pub fn provided_tags(&self) -> &HashMap<Tag, Hash> {
@@ -176,8 +181,12 @@ impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
 	/// that are in this queue.
 	/// Returns transactions that were replaced by the one imported.
+	#[test_fuzz::test_fuzz(impl_generic_args = "u64, Vec<u8>", bounds = "Hash: Eq + hash::Hash")]
 	pub fn import(
 		&mut self,
 		tx: WaitingTransaction<Hash, Ex>,
 	) -> error::Result<Vec<Arc<Transaction<Hash, Ex>>>> {
+		if !tx.is_ready() {
+			return Ok(Vec::default());
+		}
 		assert!(
 			tx.is_ready(),
@@ -185,4 +194,7 @@ impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
 			tx.missing_tags
 		);
+		if self.ready.read().contains_key(&tx.transaction.hash) {
+			return Ok(Vec::default());
+		}
 		assert!(
 			!self.ready.read().contains_key(&tx.transaction.hash),
@@ -204,4 +216,7 @@ impl<Hash: hash::Hash + Member + Serialize, Ex> ReadyTransactions<Hash, Ex> {
 			// Check if the transaction that satisfies the tag is still in the queue.
 			if let Some(other) = self.provided_tags.get(tag) {
+				if ready.get_mut(other).is_none() {
+					return Ok(Vec::default());
+				}
 				let tx = ready.get_mut(other).expect(HASH_READY);
 				tx.unlocks.push(hash.clone());
@@ -606,5 +621,8 @@ mod tests {
 	}
 
-	fn import<H: hash::Hash + Eq + Member + Serialize, Ex>(
+	fn import<
+		H: std::fmt::Debug + hash::Hash + Eq + Member + Serialize,
+		Ex: Clone + std::fmt::Debug + Serialize,
+	>(
 		ready: &mut ReadyTransactions<H, Ex>,
 		tx: Transaction<H, Ex>,
diff --git a/substrate/client/transaction-pool/src/graph/tracked_map.rs b/substrate/client/transaction-pool/src/graph/tracked_map.rs
index 47ad226..41b184e 100644
--- a/substrate/client/transaction-pool/src/graph/tracked_map.rs
+++ b/substrate/client/transaction-pool/src/graph/tracked_map.rs
@@ -34,6 +34,9 @@ pub trait Size {
 ///
 /// Size reported might be slightly off and only approximately true.
-#[derive(Debug)]
-pub struct TrackedMap<K, V> {
+#[derive(Debug, serde::Deserialize, serde::Serialize)]
+pub struct TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
 	index: Arc<RwLock<HashMap<K, V>>>,
 	bytes: AtomicIsize,
@@ -41,5 +44,21 @@ pub struct TrackedMap<K, V> {
 }
 
-impl<K, V> Default for TrackedMap<K, V> {
+impl<K: Clone, V: Clone> Clone for TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
+	fn clone(&self) -> Self {
+		Self {
+			index: Arc::new(self.clone_map().into()),
+			bytes: self.bytes.load(AtomicOrdering::Relaxed).into(),
+			length: self.length.load(AtomicOrdering::Relaxed).into(),
+		}
+	}
+}
+
+impl<K, V> Default for TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
 	fn default() -> Self {
 		Self { index: Arc::new(HashMap::default().into()), bytes: 0.into(), length: 0.into() }
@@ -47,5 +66,8 @@ impl<K, V> Default for TrackedMap<K, V> {
 }
 
-impl<K, V> TrackedMap<K, V> {
+impl<K, V> TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
 	/// Current tracked length of the content.
 	pub fn len(&self) -> usize {
@@ -73,5 +95,8 @@ impl<K, V> TrackedMap<K, V> {
 }
 
-impl<K: Clone, V: Clone> TrackedMap<K, V> {
+impl<K: Clone, V: Clone> TrackedMap<K, V>
+where
+	K: Eq + std::hash::Hash,
+{
 	/// Clone the inner map.
 	pub fn clone_map(&self) -> HashMap<K, V> {
diff --git a/substrate/primitives/runtime/src/transaction_validity.rs b/substrate/primitives/runtime/src/transaction_validity.rs
index 8369484..ef3bdb4 100644
--- a/substrate/primitives/runtime/src/transaction_validity.rs
+++ b/substrate/primitives/runtime/src/transaction_validity.rs
@@ -228,4 +228,5 @@ impl From<UnknownTransaction> for TransactionValidity {
 /// by our local node (for instance off-chain workers).
 #[derive(Copy, Clone, PartialEq, Eq, Encode, Decode, RuntimeDebug, TypeInfo)]
+#[cfg_attr(feature = "std", derive(serde::Deserialize, serde::Serialize))]
 pub enum TransactionSource {
 	/// Transaction is already included in block.
